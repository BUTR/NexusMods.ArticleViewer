@page "/login-administrator"
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorage
@inject BackendAPIClient _backendApiClient

<!--https://jsfiddle.net/bootstrapious/j80aheo9/-->
<div class="container">
    <div class="row">
        <div class="col-lg-10 col-xl-7 mx-auto">
            <div class="card">
                <h4 class="card-header text-center">Administrator Log In</h4>
                <div class="card-body">
                    <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label for="inputToken" class="form-label">Administrator Token</label>
                            <InputText id="inputToken" @bind-Value="_model.Input" type="password" required="" class="form-control border-0 shadow-sm px-4 text-primary" />
                        </div>
                        <button type="submit" class="btn btn-primary text-uppercase mb-2" disabled="@_isLoading">
                            @if (_isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            }
                            Login
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly LoginModel _model = new();
    private bool _isLoading;

    private async void OnValidSubmit()
    {
        if (string.Equals(_model.Input, "demo", StringComparison.OrdinalIgnoreCase))
            return;

        _isLoading = true;

        try
        {
            var result = await _backendApiClient.Authenticate(_model.Input, "admin");
            if (result is null)
            {
                _isLoading = false;
                StateHasChanged();
            }
            else
            {
                await _localStorage.SetItemAsStringAsync("token", result);
                _navigationManager.NavigateTo(_navigationManager.QueryString("returnUrl") ?? "articles", true);
            }
        }
        catch
        {
            _isLoading = true;
            StateHasChanged();
        }
    }
}